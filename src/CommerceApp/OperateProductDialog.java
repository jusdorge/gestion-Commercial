/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CommerceApp;

import Adapters.JDBCAdapter;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.ListIterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import util.FileProcess;
import util.Operation;

/**
 * Creates dialogs that manipulate product processes
 * such us create a new one or modify an existing one 
 * finaly deleting if possible existing one.
 * @author BENHADDOU MOHAMED AMINE
 */
public class OperateProductDialog extends ProductDialog {
    private FileProcess fileProcess;
    static private boolean changeFlag = false;
    private static ArrayList field;
    private int idOperation;
    private String fields = "";
    private String values = "";
    /**
     * Creates new form OperateProductDialog
     */
    /**
     * the first constructor for the product operation such as 
     * new product, modify product, consult and delete product
     * we need to provide two parameters
     * @param fp file process such as CREATE, MODIFY, DELETE, CONSULT
     * @param id the identification number of the product 
     */
    public OperateProductDialog(JFrame frm, FileProcess fp, int id) {
        super(frm);
        field = new ArrayList();
        fileProcess = fp;
        process = fp.getProcessTitle();
        initComponents();
        fillDialog();
        fillFields(id);
        idOperation = id;
        addListeners();
    }
    /**
     * the seconde constructor for the product operation such as 
     * new product, modify product, consult and delete product
     * we need to provide two parameters
     * @param fp file process such as CREATE, MODIFY, DELETE, CONSULT
     * @param name the name of the product
     */
    public OperateProductDialog(JFrame frm, FileProcess fp, String name) {
        super(frm);
        field = new ArrayList();
        fileProcess = fp;
        process = fp.getProcessTitle();
        initComponents();
        fillDialog();
        fillFields(name);
        addListeners();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OperateProductDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OperateProductDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OperateProductDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OperateProductDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OperateProductDialog dialog = new OperateProductDialog(null,
                            FileProcess.MODIFY
                            ,260);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    /**
     * event handeler of the ok button pressed
     */
    private void okButtonPressed(){
        
        String sql = "";
        JDBCAdapter jdbc = JDBCAdapter.connect();
        switch (fileProcess){
            case CONSULT:
                dispose();                        
            break;    
            case MODIFY:
                if (field.size()>0){
                    for (int i = 0; i < field.size(); i++){
                        JTextField f = (JTextField)field.get(i);
                        if (i > 0) {
                            fields +=", ";
                        }
                        if(f.equals(designation)){
                            fields += "DESIG=" + "'" + designation.getText() + "'";
                        }else if(f.equals(this.prix_achat)){
                            fields += "PRIXA=" + prix_achat.getText();
                        }else if(f.equals(this.prix_vente_g)){
                            fields += "PRIXV=" + prix_vente_g.getText();
                        }else if(f.equals(this.prix_vente_d)){
                            fields += "PR=" + prix_vente_d.getText();
                        }else if(f.equals(this.tva)){
                            fields += "TVA=" + tva.getText();
                        }else if(f.equals(this.stock_mini)){
                            fields += "SM=" + stock_mini.getText();
                        }else if(f.equals(this.prix_vente_g)){
                            fields += "PRIXV=" + prix_vente_g.getText();
                        }else if(f.equals(this.quantite_u)){
                            fields += "QTU=" + quantite_u.getText();
                        }
                    }
                    sql = "UPDATE produit "
                            + "SET " + fields  
                            + " WHERE IDP =" + idOperation;
                }       
                jdbc.executeUpdate(sql);
            break;
            case DELETE:
                int n = JOptionPane.showConfirmDialog(this,
                                "Voulez vous vraiment supprimer",
                                "Confirmation",
                                JOptionPane.YES_NO_OPTION);
                if (n == 0){
                    sql = "DELETE FROM ldepot WHERE IDP =" +idOperation;
                    jdbc.executeUpdate(sql);
                    sql = "DELETE FROM produit"
                           + " WHERE IDP ="+ idOperation;
                    jdbc.executeUpdate(sql);
                    if (jdbc.getUpdateError()){
                        JOptionPane.showMessageDialog(this,jdbc.getErrorNumber()+"--"+
                                            jdbc.getErrorMessage());
                    }
                }
            break;
        }
        dispose();
    }
    
    private void processKeyPressed() {

    }

    private void fillFields(String name) {
        String result;
        String query = "SELECT IDP, QTU, SM, PRIXA, PRIXV, PR, TVA FROM "
                     + "produit WHERE DESIG = '" + name +"'";
        
        JDBCAdapter jdbc = JDBCAdapter.connect();
        jdbc.executeQuery(query);
        System.out.println(query);
        int number = (int)jdbc.getValueAt(0,0);
        idOperation = number;
        DecimalFormat formatter = new DecimalFormat("NÂ°######");
        result = formatter.format(number);
        numberLabel.setText(result);
        designation.setText(name);
        quantite_u.setText(jdbc.getValueAt(0, 1).toString());
        BigDecimal st = (BigDecimal)jdbc.getValueAt(0, 2);
        stock_mini.setText(st.toString());
        BigDecimal pr_a = (BigDecimal)jdbc.getValueAt(0, 3);
        prix_achat.setText(pr_a.toString());
        BigDecimal pr_v = (BigDecimal)jdbc.getValueAt(0, 4);
        prix_vente_d.setText(pr_v.toString());
        BigDecimal pr_v_g = (BigDecimal)jdbc.getValueAt(0, 5);
        prix_vente_g.setText(pr_v_g.toString());
        Integer tva_Integer =(Integer)jdbc.getValueAt(0, 6);
        tva.setText(tva_Integer.toString());
        
    }

    public void fillFields(int id) {
        String query = "SELECT DESIG, QTU, SM, PRIXA, PRIXV, PR, TVA FROM "
                + "produit WHERE IDP=" + id;
        JDBCAdapter jdbc = JDBCAdapter.connect();
        jdbc.executeQuery(query);
        String result;
        DecimalFormat formatter = new DecimalFormat("NÂ°######");
        result = formatter.format(id);
        numberLabel.setText(result);
        designation.setText(jdbc.getValueAt(0, 0).toString());
        quantite_u.setText(jdbc.getValueAt(0, 1).toString());
        stock_mini.setText(jdbc.getValueAt(0, 2).toString());
        prix_achat.setText(jdbc.getValueAt(0, 3).toString());
        prix_vente_d.setText(jdbc.getValueAt(0,4).toString());
        prix_vente_g.setText(jdbc.getValueAt(0,5).toString());
        tva.setText(jdbc.getValueAt(0, 6).toString());
    }

    private void addListeners() {
        for (KeyListener kl:okButton.getKeyListeners()){
            okButton.removeKeyListener(kl);
        }
        okButton.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
                
            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER){
                    okButtonPressed();
                    //processKeyPressed();
                }
            }   
        });
        for (ActionListener al : okButton.getActionListeners()){
            okButton.removeActionListener(al);
        }
        okButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                okButtonPressed();
                //processKeyPressed();
                
            }
        });
        designation.addActionListener(new MyTextActionListener());
        designation.getDocument().
                addDocumentListener(new MyDocumentListener(designation));
        quantite_u.getDocument().
                addDocumentListener(new MyDocumentListener(quantite_u));
        quantite_u.addActionListener(new MyTextActionListener());
        stock_mini.addActionListener(new MyTextActionListener());
        stock_mini.getDocument().
                addDocumentListener(new MyDocumentListener(stock_mini));
        prix_achat.addActionListener(new MyTextActionListener());
        prix_achat.getDocument().
                addDocumentListener(new MyDocumentListener(prix_achat));
        prix_vente_d.addActionListener(new MyTextActionListener());
        prix_vente_d.getDocument().
                addDocumentListener(new MyDocumentListener(prix_vente_d));
        prix_vente_g.addActionListener(new MyTextActionListener());
        prix_vente_g.getDocument().
                addDocumentListener(new MyDocumentListener(prix_vente_g));
        tva.addActionListener(new MyTextActionListener());
        tva.getDocument().
                addDocumentListener(new MyDocumentListener(tva));
    }

    private static class MyDocumentListener implements DocumentListener {
        private JTextField source;
        private boolean Flag = false;
        private MyDocumentListener(JTextField textField) {
            source = textField;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            if (!Flag){
                Flag = true;
                field.add(source);
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            if (!Flag){
                Flag = true;
                field.add(source);
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            if (!Flag){
                Flag = true;
                field.add(source);
            }
        }
    }

    private class MyTextActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
           designation.selectAll();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
