/*
 * la licence de ce projet est accorder 
 * a l'entreprise bbs benhaddou brother's software
 * marque deposer aupr�s des autorit�s responsable * 
 */
package CommerceApp;

import Adapters.JDBCAdapter;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import objects.MyTableModel;
import objects.TableProduct;
import util.FileProcess;
import util.Operation;

/**
 *
 * @author DELL
 */
public class OperationDialogSupp extends OperationWindow {
    private Operation operation; 
    private FileProcess process;
    private int idSupp;
    JDBCAdapter lines;
    private int idOperation;
    /**
     * Creates new form OperationDialogSupp
     */
    public OperationDialogSupp(JDialog parent, Operation o, FileProcess p, int ids) {
        super(parent, o ,p);
        operation = o;
        process = p;
        idSupp = ids;
        initComponents();
        executeQuery();
        init();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(963, 719));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void fillTable(){
        MyTableModel tm = (MyTableModel)table.getModel();
        tm.remove(0);
        for (int i = 0; i < lines.getRowCount(); i++){ 
            int idp = (int)lines.getValueAt(i,6);
            String sql = "SELECT DESIG  FROM PRODUIT WHERE IDP=" + idp;
            JDBCAdapter des = JDBCAdapter.connect();
            des.executeQuery(sql);
            String designation = (String)des.getValueAt(0, 0);
            BigDecimal quantite = (BigDecimal)lines.getValueAt(i,7);
            int quantite_unitaire = (int)lines.getValueAt(i,8);
            BigDecimal prix =(BigDecimal)lines.getValueAt(i,9);
            BigDecimal montant = (BigDecimal)lines.getValueAt(i,10);
            TableProduct p = new TableProduct();
            p.setName(designation);
            p.setSellPrice(prix.doubleValue());
            p.setQuantity(quantite_unitaire);
            p.setUnitQuantity(quantite.doubleValue());
            tm.add(p);
            table.setValueAt(montant.doubleValue(), i, 4);
        }
        table.setModel(tm);
        totalTextField.setText(Double.toString(tm.getSum()));
    }

    private void fillOperator() {
      textField.setText(lines.getValueAt(0, 5).toString());
      formatDateLabel();
    }
    private void formatDateLabel() {
        Date today = new Date();
        String pattern = "dd/MM/YYYY--H:mm";
        SimpleDateFormat formatter = new SimpleDateFormat(pattern);
        String output = formatter.format(today);
        dateLabel.setText(output);
    }
    
    private void fillAncientDate() {
        
    }
    
    private void executeQuery() {
        String sql = "SELECT idsupp, ida, d, t,"
                    + "mode, nom, idp ,qtua, qtea,prixa ,"
                + "qtua*qtea*prixa as montant, total, d2 FROM SUPP" + 
                    operation.getTableName() +
                    " WHERE idSupp=" + idSupp;
        lines =  JDBCAdapter.connect();
        lines.executeQuery(sql);
        JDBCAdapter solde = JDBCAdapter.connect();
        String sql_solde = "SELECT SOLDE, SOLDE2 FROM " +
                        operation.getOperator().getTableName()
                        + " WHERE NOM='" + 
                        lines.getValueAt(0, 5).toString() + "'";
        System.out.println(sql_solde);
        solde.executeQuery(sql_solde);
        double solde1,solde2;
        double solde3;
        System.out.println(sql_solde);
        solde1 = ((BigDecimal)solde.getValueAt(0,0)).doubleValue();
        solde2 = ((BigDecimal)solde.getValueAt(0,1)).doubleValue();
        solde3 = solde2 + solde1;
        this.soldeTextField.setText(Double.toString(solde3));
    }

    private void init() {
        this.setContentPane(super.getContentPane());
        textField.setEditable(false);
        textField.setEnabled(false);
        table.setEnabled(false);
        //this.setTitle(process.getProcessTitle() + " " + operation.getFrameTitle());
        fillTable();
        //fillIdOperation();
        fillOperator();
        fillAncientDate();
        pack();
    }

    private void fillIdOperation() {
        numeroLabel.setText("N°" + getNumero());
    }

    private String getNumero() {
        String ida = (String)lines.getValueAt(0, 1);
        return ida;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
