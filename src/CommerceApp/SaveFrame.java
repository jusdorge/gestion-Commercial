/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CommerceApp;

import Adapters.FrameAdapter;
import Adapters.JDBCAdapter;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import util.Utilities;

/**
 *
 * @author DELL
 */
public class SaveFrame extends javax.swing.JDialog {
    private JDBCAdapter table;
    private JDBCAdapter table1;
    private String[] sql_lines;
    private String[] tableNames;
    private int tableNumbers;
    /**
     * Creates new form SaveFrame
     * @param frm
     */
    public SaveFrame(JFrame frm) {
        super(frm, true);
        initComponents();
        setIconImage(Utilities.setIconImage(this));
        FrameAdapter.centerFrame(this);
        //initFrame();   
        saveButton.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        path = new javax.swing.JTextField();
        directoryButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        message = new javax.swing.JTextArea();

        setTitle("Sauvegarde base de donnée");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Tables");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        progressBar.setBackground(new java.awt.Color(204, 204, 204));
        progressBar.setForeground(new java.awt.Color(0, 255, 0));
        progressBar.setMaximum(80);
        progressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        progressBar.setOpaque(true);
        getContentPane().add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 244, 396, 20));

        saveButton.setText("Enregistrer");
        saveButton.setMaximumSize(new java.awt.Dimension(65, 23));
        saveButton.setSelected(true);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 270, -1, 25));

        cancelButton.setText("Annuler");
        cancelButton.setMinimumSize(new java.awt.Dimension(65, 23));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, 25));

        path.setText("C:\\");
            getContentPane().add(path, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 205, 25));

            directoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconApp.jpg"))); // NOI18N
            directoryButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    directoryButtonActionPerformed(evt);
                }
            });
            getContentPane().add(directoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 270, 23, 25));

            message.setColumns(20);
            message.setRows(5);
            jScrollPane1.setViewportView(message);

            getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 390, 220));

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // demarrer un nouveau thread 
        // pour effetuer processSave
        // tant que le thread est en vie
        // incrementer la progress bar
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>(){
            @Override
            protected Void doInBackground() throws Exception {
                //connexion a la base de donnée actuelle
                //renumerer les differents tables qui y est existe
                table = JDBCAdapter.connect_C1();
                table.executeQuery("show tables");
                
                DefaultListModel listModel = new DefaultListModel();
                message.append("les tables qui existe sont:\n");
                tableNames = new String[table.getRowCount()];
                for (int i = 0; i < table.getRowCount(); i++){
                    String it = (String)table.getValueAt(i, 0);
                    listModel.addElement(it);
                    tableNames[i] = it;
                    message.append((i+1) +" "+ it + "\n");
                }
                tableNumbers = table.getRowCount();
                String sql1 = "SELECT * FROM ";
                String sql2 = " INTO OUTFILE '";
                String sql3;
                sql3 = path.getText().substring(0,path.getText().length()-1) 
                        + "/backup/";
                LocalDate d = LocalDate.now();        
                //creation du repertoire date de ce jour
                String subd = d.toString();
                String sql4 = subd.substring(0,4) + 
                              subd.substring(5,7) + 
                              subd.substring(8,10);
                String sql5 = ".sql";
                File f = new File(sql3);        
                publish("Debut de la sauvegarde...\n");
                Thread.sleep(1000);
                setProgress(1);
                if (f.exists()){
                    publish("sauveguarde des fichiers possible...\n");
                    publish(sql4);
                }else{
                    publish ("Répertoire inéxistant \n");
                    publish("création du répertoire " + sql4 + "\n");
                    f.mkdir();
                }
                File sub_f = new File(sql3 + "/" + sql4);
                sub_f.mkdir();
                //table.executeUpdate("use b4");
                publish ("reconstruction des tables...\n");
                Thread.sleep(1000);
                setProgress(10);
                sql_lines = new String[tableNumbers];
                publish("_Nombre de ligne de creations :" + tableNumbers);
                for (int i = 0; i < tableNumbers; i++){
                    publish((i + 1) + "- le fichier a reconstruire :" + tableNames[i]);
                    setProgress(11+i);
                    // Initialise the table1 connexion to the R+ database.
                    table1 = JDBCAdapter.connect_C1();
                    String sql = sql1 + tableNames[i] + 
                            sql2 + sql3 + sql4 + "/" +
                            tableNames[i] +
                            sql5 + "'";
                    table1.executeQuery(sql);
                    //Describe process
                    String sql_Describe = "SHOW CREATE TABLE " + 
                            tableNames[i];
                    table.executeUpdate("SET SQL_QUOTE_SHOW_CREATE = 0");
                    table.executeQuery(sql_Describe);

                    String query = (String)table.getValueAt(0, 1);                           
                    
                    sql_lines[i] = query;
                    
                    publish("resultat de la reconstruction :");
                    publish(query);
                }
                //save the sql lines in a sql file
                publish("Ecriture des fichers dans le disque.");
                PrintWriter outputStream = null;
                publish("_Nombre de ligne dans le fichier createSql.sql: "
                                    + tableNumbers);
                try {
                    outputStream = new PrintWriter(new FileWriter(sql3 + 
                                                sql4 + "/" + "createSql.sql"));
                    for (int i = 0;i < tableNumbers ; i++) {
                        setProgress(9 + tableNumbers + i);
                        publish(i + "- line :" + sql_lines[i]);
                        outputStream.println(sql_lines[i]);
                        outputStream.println("END");
                    }
                } finally {
                    if (outputStream != null) {
                        outputStream.close();
                    }
                }
                return null;
            }
            
            @Override
            protected void done() {
                if(isCancelled()){
                    publish("Annulé");
                }else{
                    publish ("Terminé");
                }
               // dispose();
            }
            
            @Override
            protected void process(List<String> chunks) {
                message.selectAll();
                for (String line: chunks){
                    message.append(line);
                    message.append("\n");
                }
            }
                
        };
        worker.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("progress")){
                    progressBar.setValue((Integer)evt.getNewValue());
                }
            }
        });
        worker.execute();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void directoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryButtonActionPerformed
        processDirectoryChoice();
    }//GEN-LAST:event_directoryButtonActionPerformed

       /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        JDialog f = new SaveFrame(null);
        f.setVisible(true);
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton directoryButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea message;
    private static javax.swing.JTextField path;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    private void initFrame() {

    }

    private void processDirectoryChoice() {
        File dir = new File("C:\\");
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(dir);
        chooser.showOpenDialog(this);
        File f = chooser.getSelectedFile();
        path.setText(f.getAbsolutePath());
    }
}
