/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CommerceApp;

import Adapters.JDBCAdapter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import objects.MyTableModel;
import objects.TableProduct;
import util.FileProcess;
import util.Operation;

/**
 *
 * @author DELL
 */
public class OperationDialog extends OperationWindow {
    private int idOperation;
    private Operation operation;
    private FileProcess fileProcess;
    private boolean anyModification = false;
    private String textFieldOldValue;
    private ArrayList tableModifications;
    /**
     * Creates new form OperationDialog
     */
    public OperationDialog(JFrame frm,Operation op, FileProcess fp, int ido) {
        super(frm,op, fp);
        fileProcess = fp;
        operation = op;
        idOperation = ido;
        init();
    }
    public OperationDialog(JDialog dlg,Operation op, FileProcess fp, int ido) {
        super(dlg,op,fp);
        fileProcess = fp;
        operation = op;
        idOperation = ido;
        init();
    }
    
    protected void init(){
        tableModifications = new ArrayList();
        initComponents();
        this.setPreferredSize(super.getSize());
        this.setContentPane(super.getContentPane());
        this.setTitle(fileProcess.getProcessTitle() + " " + operation.getFrameTitle());
       
        this.numeroLabel.setText("NÂ°" + Integer.toString(idOperation));
        fillTable();
        fillOperator();
        fillAncientDate();
        fillSolde();
        textField.setEditable(false);
        table.setEnabled(false);
        pack();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(980, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 980, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillTable() {
        String query = "SELECT b.DESIG, a.QTEA, a.QTUA, a.PRIXA, "
                + "a.QTEA*a.QTUA*a.PRIXA FROM " +
                operation.getDetailTableName() + " a LEFT JOIN " +
                operation.getOperand().getTableName() + 
                " b ON a.IDP = b.IDP WHERE a.IDA=" + idOperation;
        JDBCAdapter jdbc = JDBCAdapter.connect();
        jdbc.executeQuery(query);
        MyTableModel tm = (MyTableModel)table.getModel();
        tm.remove(0);
        for (int i = 0; i < jdbc.getRowCount(); i++){ 
            String designation = (String)jdbc.getValueAt(i,0);
            int quantite = (int)jdbc.getValueAt(i,1);
            BigDecimal quantite_unitaire = (BigDecimal)jdbc.getValueAt(i,2);
            BigDecimal prix =(BigDecimal)jdbc.getValueAt(i,3);
            BigDecimal montant = (BigDecimal)jdbc.getValueAt(i,4);
            TableProduct p = new TableProduct();
            p.setName(designation);
            p.setSellPrice(prix.doubleValue());
            p.setQuantity(quantite);
            p.setUnitQuantity(quantite_unitaire.doubleValue());
            tm.add(p);
            table.setValueAt(montant.doubleValue(), i, 4);
        }
        totalTextField.setText(Double.toString(tm.getSum()));
        table.addPropertyChangeListener(new tableListener());
    }

    private void fillOperator() {
        String sql = "SELECT b.NOM FROM " + operation.getTableName() +
                    " a LEFT JOIN " + operation.getOperator().getTableName() +
                    " b on a.id=b.id WHERE a.ida=" + idOperation;
        JDBCAdapter result = JDBCAdapter.connect();
        result.executeQuery(sql);
        if (result.getRowCount() >0){
            textField.setText((String)result.getValueAt(0,0));
        }
        textFieldOldValue = textField.getText();
        textField.addPropertyChangeListener(new tableListener());
    }

    private void fillAncientDate() {
       lastVisitTextField.setText(this.getLastVisit());
    }

    private void fillSolde() {
        this.soldeTextField.setText(this.getSoldeClient());
    }

    private static class position {
        private int column;
        private int row;
        public position(int selectedColumn, int selectedRow) {
            column = selectedColumn;
            row = selectedRow;
        }
        public int getColumn(){
            return column;
        }
        
        public int getRow(){
            return row;
        }
    }

    private class tableListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            Object source = evt.getSource();
            String propertyName = evt.getPropertyName();
            if (propertyName.equals("ancestor")){
                if (source == textField){
                    if(!textFieldOldValue.equals(textField.getText())){
                        anyModification = true;
                    }
                }else if (source == table){
                    //locate the modifications positions
                    anyModification = true;
                    tableModifications.add(
                            new position(table.getSelectedColumn(),
                                         table.getSelectedRow()));
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

