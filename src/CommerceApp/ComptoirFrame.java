package CommerceApp;
import Adapters.FrameAdapter;
import Adapters.JDBCAdapter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultCellEditor;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import objects.CellEditor;
import objects.MyTableModel;
import objects.TFEditor;
import objects.TableModelDetail;
import objects.TableProduct;
import util.Utilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Cette classe est reponsable de l'enregistrement
 * des ventes en détail.
 * @author DELL
 */
public class ComptoirFrame extends javax.swing.JDialog implements 
                                                    TableModelListener
                                                    {
    private JDBCAdapter adapter;
    private TableModelDetail tableModel = new TableModelDetail();
    private String SQL = "SELECT DESIG, PR, PRIXA, PRIXV  FROM PRODUIT "
            + "LEFT JOIN BAR ON BAR.IDP = PRODUIT.IDP WHERE BAR.BAR =";
    private String designation;
    private BigDecimal prix;
    private BigDecimal [] prixAchat;
    private BigDecimal prixGros;
    private double remise = 0.0; 
    private double qte = 1;
    private int row = 0; 
    private boolean productIsValide = false; 
    
    /**
     * Creer une forme de comptoir
     */
    
    public ComptoirFrame() {
        super(new JFrame(), true);
        prixAchat = new BigDecimal[10];
        prixAchat[0] = new BigDecimal(0);
        connect();
        initComponents();
        setIconImage(Utilities.setIconImage(this));
        initTableDetail();
        initFonctionLabels();
        initInformationPanel();
        FrameAdapter.centerFrame(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InformationPanel = new javax.swing.JPanel();
        totalPanelLabel = new javax.swing.JLabel();
        productNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pourcentageLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        profilLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        codeBarTextField = new javax.swing.JTextField();
        prixLabel = new javax.swing.JLabel();
        designationLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDetail = new javax.swing.JTable();
        totalLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        f5Label = new javax.swing.JLabel();
        f6Label = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        InformationPanel.setBackground(new java.awt.Color(0, 0, 255));
        InformationPanel.setForeground(new java.awt.Color(255, 255, 255));
        InformationPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalPanelLabel.setFont(new java.awt.Font("DS-Digital", 1, 24)); // NOI18N
        totalPanelLabel.setForeground(new java.awt.Color(255, 102, 102));
        totalPanelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalPanelLabel.setText("jLabel2");
        InformationPanel.add(totalPanelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 30));

        productNameLabel.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        productNameLabel.setForeground(new java.awt.Color(0, 204, 255));
        productNameLabel.setText("CLIENT : DETAIL");
        InformationPanel.add(productNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 100, 20));

        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText("pourcentage");
        InformationPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        pourcentageLabel.setFont(new java.awt.Font("DS-Digital", 0, 24)); // NOI18N
        pourcentageLabel.setForeground(new java.awt.Color(255, 204, 0));
        pourcentageLabel.setText("100.00%");
        InformationPanel.add(pourcentageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, 30));

        jLabel4.setForeground(new java.awt.Color(255, 204, 0));
        jLabel4.setText("profil");
        InformationPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, -1, -1));

        profilLabel.setFont(new java.awt.Font("DS-Digital", 0, 24)); // NOI18N
        profilLabel.setForeground(new java.awt.Color(255, 204, 0));
        profilLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        profilLabel.setText("0.00");
        InformationPanel.add(profilLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 80, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 204, 255));
        jLabel3.setText("BON N°");
        InformationPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 50, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 204, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("00000");
        InformationPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 34, 60, 30));

        getContentPane().add(InformationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, 180, 140));

        codeBarTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codeBarTextFieldFocusGained(evt);
            }
        });
        codeBarTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeBarTextFieldActionPerformed(evt);
            }
        });
        codeBarTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codeBarTextFieldKeyPressed(evt);
            }
        });
        getContentPane().add(codeBarTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 200, 30));

        prixLabel.setBackground(new java.awt.Color(0, 0, 0));
        prixLabel.setFont(new java.awt.Font("DS-Digital", 1, 36)); // NOI18N
        prixLabel.setForeground(new java.awt.Color(255, 51, 153));
        prixLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        prixLabel.setText("0.00");
        prixLabel.setOpaque(true);
        getContentPane().add(prixLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 130, 30));

        designationLabel.setBackground(new java.awt.Color(0, 0, 0));
        designationLabel.setFont(new java.awt.Font("DS-Digital", 1, 36)); // NOI18N
        designationLabel.setForeground(new java.awt.Color(0, 255, 0));
        designationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        designationLabel.setOpaque(true);
        getContentPane().add(designationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 510, 30));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 88, 710, -1));

        tableDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produit", "Qte", "Prix", "Montant"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDetail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableDetailFocusGained(evt);
            }
        });
        tableDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableDetailKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableDetail);
        if (tableDetail.getColumnModel().getColumnCount() > 0) {
            tableDetail.getColumnModel().getColumn(0).setResizable(false);
            tableDetail.getColumnModel().getColumn(0).setPreferredWidth(150);
            tableDetail.getColumnModel().getColumn(1).setResizable(false);
            tableDetail.getColumnModel().getColumn(1).setPreferredWidth(30);
            tableDetail.getColumnModel().getColumn(2).setResizable(false);
            tableDetail.getColumnModel().getColumn(2).setPreferredWidth(70);
            tableDetail.getColumnModel().getColumn(3).setResizable(false);
            tableDetail.getColumnModel().getColumn(3).setPreferredWidth(70);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 510, 400));

        totalLabel.setBackground(new java.awt.Color(255, 255, 255));
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLabel.setText("0.00");
        totalLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        totalLabel.setOpaque(true);
        getContentPane().add(totalLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 500, 120, 30));

        jLabel1.setText("Total");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 510, -1, 20));

        f5Label.setText("F5 - Modifier la ligne en cours");
        getContentPane().add(f5Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, -1, -1));

        f6Label.setText("F6 - Revenir au champ code bare");
        getContentPane().add(f6Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("PRIX");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * gère l'évenement actionner par l'enfoncement de la touche enter
     * @param evt object requis por la gestion de cette eventment
     */
    private void codeBarTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeBarTextFieldActionPerformed
        executeSQL(codeBarTextField.getText());
        afficherResultat(); 
        updateInformationPanel();
    }//GEN-LAST:event_codeBarTextFieldActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        processKeyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    private void codeBarTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeBarTextFieldKeyPressed
        processKeyPressed(evt);
    }//GEN-LAST:event_codeBarTextFieldKeyPressed

    private void tableDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableDetailKeyPressed
        processKeyPressed(evt);
    }//GEN-LAST:event_tableDetailKeyPressed

    private void codeBarTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codeBarTextFieldFocusGained
        tableStopEditing();
        f5Label.setVisible(true);
        f6Label.setVisible(false);
    }//GEN-LAST:event_codeBarTextFieldFocusGained

    private void tableDetailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableDetailFocusGained
        f5Label.setVisible(false);
        f6Label.setVisible(true);
    }//GEN-LAST:event_tableDetailFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InformationPanel;
    private javax.swing.JTextField codeBarTextField;
    private javax.swing.JLabel designationLabel;
    private javax.swing.JLabel f5Label;
    private javax.swing.JLabel f6Label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel pourcentageLabel;
    private javax.swing.JLabel prixLabel;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel profilLabel;
    private javax.swing.JTable tableDetail;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalPanelLabel;
    // End of variables declaration//GEN-END:variables

    private void afficherResultat() {
        affichageRalenti(prixLabel,getPrix());
        affichageRalenti(designationLabel,getDesignation());
        remplirTable();
        codeBarTextField.setText("");
    }

    private String getDesignation() {
        return designation;
    }

    private String getPrix() {
        return prix.toString();
    }

    private void connect() {
        adapter = new JDBCAdapter(Utilities.URL,Utilities.DRIVER_NAME,
                                   Utilities.USER,Utilities.PASSWORD);
    }

    private void executeSQL(String text) {
        String sql = SQL;
        if (adapter != null){
            sql += text;
            adapter.executeQuery(sql);
            if (adapter.getRowCount() != 0){
                productIsValide = true;
                designation = (String)adapter.getValueAt(0, 0);
                prix = (BigDecimal)adapter.getValueAt(0,1);                
                prixAchat[row] = (BigDecimal)adapter.getValueAt(0,2);
                prixGros = (BigDecimal)adapter.getValueAt(0,3);
            }else{
                productIsValide = false;
                designation = "aucun code ne correspond a la recherche.";
                prix = new BigDecimal(0.00);
                prixAchat[row] = new BigDecimal(0.00);
                prixGros = new BigDecimal(0.00);
            }
        }
    }

    private void remplirTable() {
        if (productIsValide){
            if (!productExistDéjà(designation)){
                tableDetail.getModel().setValueAt(designation, row, 0);
                tableDetail.getModel().setValueAt(qte, row, 1);
                tableDetail.getModel().setValueAt(prix.doubleValue(), row, 2);
                double montant = qte * prix.doubleValue();
                tableDetail.getModel().setValueAt(montant, row, 3);
                tableModel.add(new TableProduct());
                row += 1;
            }else{
                double newQte = (double)tableDetail.getValueAt(row, 1) + 1;
                tableDetail.getModel().setValueAt(newQte, row, 1);
                double montant = newQte * prix.doubleValue();
                tableDetail.getModel().setValueAt(montant, row, 3);
            }
        }
    }

    private void affichageRalenti(JLabel aLabel, String aString) { 
        int length = aString.length();
        
        new Thread(){
            String subString;
            int column =0;
            public void run(){
                while (column < length){
                    subString = aString.substring(0,column);
                    aLabel.setText(subString);
                    try{
                        sleep(200);
                    }catch(InterruptedException e){
                        return ;
                    }
                    
                    column += 1;
                }
                aLabel.setText("");
            }
        }.start();
    }

    private boolean productExistDéjà(String designation) {
        String curDesignation;
        for (int i = 0; i < tableDetail.getRowCount(); i ++){
            curDesignation = (String)tableDetail.getValueAt(i,0);
            if(designation.equals(curDesignation)){
                row = i;
                return true;
            }
        }
        row = tableDetail.getRowCount() - 1;
        return false;
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        TableModelDetail model = (TableModelDetail)tableDetail.getModel();
        totalLabel.setText(Double.toString(model.getSum()));
    }

    private void processKeyPressed(KeyEvent evt) {
        if (evt.getSource() == codeBarTextField){
            if (evt.getKeyCode() == KeyEvent.VK_F5){
                int column = 1;
                tableDetail.requestFocusInWindow();
                tableDetail.clearSelection();
                tableDetail.changeSelection(row - 1, column, false, false);              
            }
        }else if(evt.getSource() == tableDetail){
            if (evt.getKeyCode() == KeyEvent.VK_F6){
                codeBarTextField.requestFocusInWindow();
            }
        }
    }

    private void initTableDetail() {
        tableDetail.setRowHeight(30);
        tableDetail.setModel(tableModel);
        tableDetail.getModel().addTableModelListener(this);
        for (int i = 0;i <3; i++){
            tableDetail.getColumnModel().
                   getColumn(i).setCellEditor(new CellEditor());
        }
        tableDetail.getColumnModel().getColumn(0).setPreferredWidth(250);
        // defines a new input map for the Enter KeyStroke "ENTER" in the table.
        tableDetail.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"check");
        tableDetail.getActionMap().put("check", new AbstractAction() {
        // Overrides the default enter key event of the table.
        
        public void actionPerformed(ActionEvent ex) { tableActionPerformed(ex);}

            private void tableActionPerformed(ActionEvent ex) {
                int r = tableDetail.getSelectedRow();
                int c = tableDetail.getSelectedColumn();
                String productName = (String)tableDetail.getValueAt(r,0);
                if ((r != -1) && (c != -1)){
                    tableStopEditing();
                    int cc = c + 1;
                    if (cc >= tableDetail.getColumnCount() - 1){
                        cc = 0;
                    }
                    tableDetail.clearSelection();
                    tableDetail.changeSelection(r,cc,false,false);
                }	
            }                    
        });   
    }
    private void tableStopEditing() {
                TableCellEditor editor = (TableCellEditor) tableDetail.getCellEditor();
                if (editor != null){
                    editor.stopCellEditing();
                }
            }

    private void initInformationPanel() {
        totalPanelLabel.setText("0.0");
        productNameLabel.setText("CLIENT : DETAIL");
        pourcentageLabel.setText("0.0%");
        profilLabel.setText("0.0");
    }

    private void initFonctionLabels() {
        f5Label.setVisible(true);
        f6Label.setVisible(false);

    }

    private void updateInformationPanel() {
        totalPanelLabel.setText(totalLabel.getText());
        getProfil();
        
    }

    private void getProfil() {
        double c = 0.0;
        for (int i=0; i < tableDetail.getRowCount()-1; i++){
            double d = (double)tableDetail.getValueAt(i, 2);
            double a = d - prixAchat[i].doubleValue();
            System.out.println(prixAchat[i].toString());
            double q = (double)tableDetail.getValueAt(i, 1);
            c += q * a;
        }
        profilLabel.setText(Double.toString(c));
        double p = c / Double.parseDouble(totalLabel.getText())*100;
        DecimalFormat myFormatter = new DecimalFormat("###,###.##");
        String output = myFormatter.format(c);
        profilLabel.setText(output);
        output = myFormatter.format(p);
        pourcentageLabel.setText(output + "%");
    }

    private double getRemise() {
        return  remise;
    }

    
}
